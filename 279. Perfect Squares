class Solution {
    public int numSquares(int n) {

     //   return count(n,0,Integer.MAX_VALUE);

     //MEMO
    //  int[]dp=new int[n+1];
    //  return countMemo(n,dp);

    return countTabu(n);
        
    }
    //Tabulation
    int countTabu(int n){
        int dp[]=new int[n+1];
        Arrays.fill(dp,n);
        dp[0]=0;

        for(int i=1;i<=n;i++){

            for(int j=1;j*j<=i;j++){
                int s=j*j;
                dp[i]=Math.min(dp[i],1+dp[i-s]);
            }
        }
        return dp[n]; 

    }

    //MEMORIZATION
    int countMemo(int n,int[] dp){
      if(n<4)
       return n;

      if(dp[n]!=0)
       return dp[n];
     int ans=n;
     for(int i=1;i*i<=n;i++){
         int s=i*i;
         ans=Math.min(ans,1+countMemo(n-s,dp));
     } 
     return dp[n]=ans;    
        
    }

    //RECURSION SOLN BUT TLE
    // int count(int n,int c,int min){
    //     if(n==0)
    //       return c;

    //     int i=1;
    //     while(true){
    //         int sqr=i*i;

    //         if(sqr<=n){
    //             int sum=count(n-sqr,c+1,min);
    //             min=Math.min(sum,min);
    //             i++;
    //         }else{
    //             return min;
    //         }
    //        // i++;
        


    //     }  
    //     // return min;
    // }
}
