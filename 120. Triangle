Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.


soln:-

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {

          //TLE
        //return distance(triangle,0,0);

        int n=triangle.size();
        int dp[][]=new int[n][n];

        for(int []a:dp){
            Arrays.fill(a,-1);
        }

        return distanceMemo(triangle,0,0,dp);

        
    }

    //MEMO DP
    int distanceMemo(List<List<Integer>> triangle,int i,int j,int dp[][]){
         if(i==triangle.size()-1){
            return triangle.get(i).get(j);
        }
        if(dp[i][j]!=-1)
         return dp[i][j];

        int a=distanceMemo(triangle,i+1,j,dp);
        int b=distanceMemo(triangle,i+1,j+1,dp);

        return dp[i][j] =Math.min(a,b)+triangle.get(i).get(j);
    }
   
   //RECURSION TLE
    int distance(List<List<Integer>> triangle,int i,int j){
        if(i==triangle.size()-1){
            return triangle.get(i).get(j);
        }

        int a=distance(triangle,i+1,j);
        int b=distance(triangle,i+1,j+1);

        return Math.min(a,b)+triangle.get(i).get(j);
    }
}
