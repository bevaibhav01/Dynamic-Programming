//https://leetcode.com/problems/minimum-path-sum/description/?envType=list&envId=55ac4kuc

Soln:-

class Solution {
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++)
         for(int j=0;j<n;j++)
          dp[i][j]=-1;

      //MEMORIZATION
      // return countCostMem(m-1,n-1,grid,dp); 

       //TABULATION
       return countCosTab(grid);
        
    }
    
    //TABULATION DP;
    int countCosTab(int[][]grid){
      int m=grid.length;
      int n=grid[0].length;

      int [][]dp=new int[m][n];
      dp[0][0]=grid[0][0]; 
      //INITIALISATION OF DOWN
      for(int i=1;i<m;i++){
          dp[i][0]=grid[i][0]+dp[i-1][0];
      }
      
      //INITIALISATION OF RIGHT
      for(int i=1;i<n;i++){
          dp[0][i]=grid[0][i]+dp[0][i-1];
      }

      for(int i=1;i<m;i++){
          for(int j=1;j<n;j++){
              dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j])+grid[i][j];
          }
      }

      return dp[m-1][n-1];


    }

    //MEMORIZATION SOLUTION
    int countCostMem(int i,int j,int[][]grid,int dp[][]){
        if(i<0||j<0)
         return -1;
        if(i==0&&j==0)
         return grid[i][j];

        if(dp[i][j]!=-1)
         return dp[i][j];

        int left=countCostMem(i,j-1,grid,dp);
        int up=countCostMem(i-1,j,grid,dp);

        if(left==-1&&up==-1)
         dp[i][j]=-1;
        else if(left==-1)
         dp[i][j]=up+grid[i][j];
        else if(up==-1)
         dp[i][j]=left+grid[i][j];
       else 
        dp[i][j]=Math.min(left,up)+grid[i][j];

        return dp[i][j];  
              
    }

    

    //RECURSION SOLN TLE
    // int countCostRec(int i,int j,int[][]grid,int cost){
    //    int m=grid.length;
    //    int n=grid[0].length;

    //    if(i>=m||j>=n)
    //     return -1;

    //    if(i==m-1&&j==n-1)
    //     return cost+grid[i][j];

    //    int right=countCostRec(i,j+1,grid,cost+grid[i][j]);
    //    int down=countCostRec(i+1,j,grid,cost+grid[i][j]);

    //    if(right==-1&&down==-1)
    //     return -1;
    //    if(right==-1)
    //     return down;
    //    if(down==-1)
    //     return right;
    //    return Math.min(right,down);      

    // }
}
